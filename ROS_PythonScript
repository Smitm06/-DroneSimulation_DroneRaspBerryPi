#!/usr/bin/env python3
#This Python script is a ROS (Robot Operating System) node that subscribes to two topics (/mavros/imu/data and /quad/quad_states) to obtain information about the orientation and position of a quadrotor drone. The script then publishes the corresponding information to another topic (/gazebo/set_model_state), allowing the visualization of the quadrotor's state in the Gazebo simulator
import rospy
from gazebo_msgs.msg import ModelState
from geometry_msgs.msg import Pose
import math
import time
from sensor_msgs.msg import Imu
from drone_pkg.msg import quad_states

global quad_w_quaternion, quad_x_quaternion, quad_y_quaternion, quad_z_quaternion
global quad_pos

quad_pos = [0.0, 0.0, 0.0]

quad_w_quaternion = 0.0
quad_x_quaternion = 0.0
quad_y_quaternion = 0.0
quad_z_quaternion = 0.0

def callback_for_position(data):
   global quad_pos
   quad_pos[0] = data.quad_x
   quad_pos[1] = data.quad_y
   quad_pos[2] = data.quad_z

def callback(data):
    global quad_w_quaternion, quad_x_quaternion, quad_y_quaternion, quad_z_quaternion

    quad_w_quaternion=data.orientation.w
    quad_x_quaternion=data.orientation.x
    quad_y_quaternion=data.orientation.y
    quad_z_quaternion=data.orientation.z

if __name__ == '__main__':
   rospy.init_node('gazebo_visulation')

   # Create a publisher to publish the model state
   model_state_pub = rospy.Publisher('/gazebo/set_model_state', ModelState, queue_size=1)

   rate = rospy.Rate(100)  # Publish at a rate of 10 Hz
   rospy.Subscriber("/mavros/imu/data", Imu, callback)
   rospy.Subscriber("/quad/quad_states", quad_states, callback_for_position)

   quad1 = ModelState()
   quad1.model_name = "parrot_bebop_2"
   
   # quad1.
   while not rospy.is_shutdown():
      # Publish the model state to Gazebo
      quad1.pose.position.x = quad_pos[0]
      quad1.pose.position.y = quad_pos[1]
      quad1.pose.position.z = quad_pos[2] + 0.5
      quad1.pose.orientation.x = quad_x_quaternion
      quad1.pose.orientation.y = quad_y_quaternion
      quad1.pose.orientation.z = quad_z_quaternion
      quad1.pose.orientation.w = quad_w_quaternion
      model_state_pub.publish(quad1)
      # Spin the ROS node
      rate.sleep()



